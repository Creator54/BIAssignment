/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bi.assignment;

import io.github.bonigarcia.wdm.WebDriverManager;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.imageio.ImageIO;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import ru.yandex.qatools.ashot.AShot;
import ru.yandex.qatools.ashot.Screenshot;
import ru.yandex.qatools.ashot.shooting.ShootingStrategies;

// Below is the code outline which we will use for this project
/*
* This Java source file was generated by the Gradle 'init' task.
*/

public class App {

    public static ChromeDriver createDriver() {
        // TODO Create a new chrome Driver and Return the same
        // Launch Browser using Zalenium
        // final DesiredCapabilities capabilities = new DesiredCapabilities();
        // capabilities.setBrowserName(BrowserType.CHROME);
        // ChromeDriver driver = new ChromeDriver();
        WebDriverManager.chromedriver().setup();
        ChromeDriver driver;
        driver = new ChromeDriver();
        return driver;
    }

    public static void printQKartLoadingtime(ChromeDriver driver) {
        // TODO Navigate to home page of QKart and verify the time taken for the page to
        // load
        // Create a new variable that would hold the current timestamp Eg. start
        // Navigate to the QKart home page by using driver.get() method
        String homePageUrl = "https://crio-qkart-frontend-qa.vercel.app";
        long start = (System.currentTimeMillis() / 1000) % 60;
        driver.get(homePageUrl);
        // Create another variable that would hold the current timestamp Eg. end
        // Find the difference between the two timestamps i.e end - start
        long end = (System.currentTimeMillis() / 1000) % 60;
        long duration = (end - start); // Total execution time in milli seconds
        // Print the time taken in seconds in this format - Time taken to load QKart Page: 3 seconds
        System.out.println("Time taken to load QKart Page:" + duration + " seconds");
    }

    public static void captureFullPageScreenshot(ChromeDriver driver) {
        // TODO: Capture the full page screenshot
        // Save the file with a unique name
        // Print the path of the file
        try {
            String path = "app/screenshots/";
            File theDir = new File(path);
            if (!theDir.exists()) {
                theDir.mkdirs();
            }
            String timestamp = String.valueOf(java.time.LocalDateTime.now()).replace(":", "-");
            String fileName = String.format("screenshotTime%s", timestamp);
            String picPath = path + "fullPage" +fileName+ ".png";
            // TakesScreenshot scrShot = ((TakesScreenshot) driver);
            // File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);
            new AShot()
                    .shootingStrategy(ShootingStrategies.viewportPasting(100))
                    .takeScreenshot(driver);
            Screenshot screenshot = new AShot().shootingStrategy(ShootingStrategies.viewportPasting(1000))
                    .takeScreenshot(driver);
            ImageIO.write(screenshot.getImage(), "PNG", new File(picPath));
            Path path1 = Paths.get(picPath);
            printPath(path1);
            // System.out.println("\n[Path] : " + path1);
            // File DestFile = new File("screenshots/" + fileName);
            // FileUtils.copyFile(SrcFile, DestFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void GetProductImageandURL(ChromeDriver driver, String productName) throws InterruptedException {
        // TODO: Given the product name, print the price of the project and the url of
        // the image
    }

    public static void printPath(Path path) {

        System.out.printf("%-25s : %s%n", "path", path);
        // System.out.printf("%-25s : %s%n", "path.toAbsolutePath()",
        //         path.toAbsolutePath());
        // System.out.printf("%-25s : %s%n", "path.getParent()", path.getParent());
        // System.out.printf("%-25s : %s%n", "path.getRoot()", path.getRoot());

        // try {

            // if (Files.notExists(path)) {
            //     return;
            // }

            // default, follow symbolic link
            // System.out.printf("%-25s : %s%n", "path.toRealPath()",
            //         path.toRealPath());
            // no follow symbolic link
            // System.out.printf("%-25s : %s%n", "path.toRealPath(nofollow)",
            //         path.toRealPath(LinkOption.NOFOLLOW_LINKS));

            // alternative to check isSymbolicLink
            /*
             * if (Files.isSymbolicLink(path)) {
             * Path link = Files.readSymbolicLink(path);
             * System.out.println(link);
             * }
             */

        // } catch (IOException e) {
        //     e.printStackTrace();
        // }

    }

    public static void main(String[] args) {
        ChromeDriver driver = createDriver();
        // String input = String.join(" ", args);
        try {
            printQKartLoadingtime(driver);
            captureFullPageScreenshot(driver);
        //     GetProductImageandURL(driver, input);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            // driver.quit();
        }
    }
}